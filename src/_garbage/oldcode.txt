# -------------------- remember --------------------
async def remember(request: RememberRequest) -> List[RememberJob]:
    """
    Memorize messages and resources in the memory bank XXX
    
    
    """
    responses = []
    
    # Send each message to the queue
    queue_client = queue_service.get_queue_client(SAVE_MESSAGE_QUEUE)                
    for message in request.messages:        
        resp = queue_client.send_message(message.model_dump_json() )  # Send the JSON message
        
        responses.append(
            RememberJob(
                status="queued", 
                job_id=resp.id, 
                collection=message.collection, 
                status_message="Message queued for processing."))         
        
        print(f"Sent message {message.text} to queue {queue_client.queue_name} with id {resp.id}")
        
    # Send each resource to the queue
    queue_client = queue_service.get_queue_client(IMPORT_RESOURCE_QUEUE)                
    for res in request.resources:                
        resp = queue_client.send_message(res.model_dump_json())  # Send the JSON URL
        
        responses.append(
            RememberJob(
                status="queued", 
                job_id=resp.id, 
                collection=res.collection, 
                status_message="Resource queued for processing."))
        
        print(f"Sent url {res.address} to queue {queue_client.queue_name} with id {resp.id}")

    return responses

# -------------------- ask --------------------
async def ask(
    question: str = Query(..., description="The question to ask"), 
    collections: Optional[str] = Query(None, description="The collections to query (comma separated).")) -> QuestionResponse:
    # Implementation of LLamaIndex query goes here
    index = await esutils.get_index()
       
    query_engine = index.as_query_engine()
    resp = query_engine.query(question)    

    list = []    
    for source_node in resp.source_nodes:        
        list.append(source_node.text)
        
    # create a QuestionResponse object with the source nodes data
    colls = collections.split(",") if collections else ['*'] 
    qr = QuestionResponse(
        answer=resp.response, 
        collections=colls, 
        confidence=0.9, 
        links=list)    
    
    return qr  